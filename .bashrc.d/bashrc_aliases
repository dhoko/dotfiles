alias l='ls -CF --color=auto'
alias la='ls -alF --color=auto'
alias ll='ls -lhF --color=auto'
alias lt='ls -lht --color=auto'
alias alert_helper='history|tail -n1|sed -e "s/^\s*[0-9]\+\s*//" -e "s/;\s*alert$//"'
alias alert='notify-send -i /usr/share/icons/gnome/32x32/apps/gnome-terminal.png "[0] "'

alias laravel='~/dev/laravel.sh'

alias clock='watch -n 1 -t date'

# Dodo for the eeepc
alias dodo='sudo /etc/acpi/hibernate.sh'

alias pi='ssh pi@192.168.0.22'
alias wpi='ssh www-data@192.168.0.22'


alias gis='git status'
function commit() {
  git commit -a -m "$@"
}
alias gpush='git push origin '
alias gpb='git push origin $(git rev-parse --abbrev-ref HEAD)'
alias gpob='git pull origin $(git rev-parse --abbrev-ref HEAD)'
alias gog="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias backToTheFuture='git reset --hard HEAD~1'
function glink() {
  git commit --allow-empty -m "$@"
}
alias ghb='git checkout -b'
alias gch='git checkout'
alias gpo='git pull origin'
alias gmaster='git pull origin master'
alias clone='git clone --depth 1'
alias grename='git commit --amend -m'
# show latest commit for branches via http://www.alexkras.com/19-git-tips-for-everyday-use/
alias gitHistory="git for-each-ref --sort=committerdate --format='%(refname:short) * %(authorname) * %(committerdate:relative)' refs/remotes/ | column -t -s '*'"
# Sublime text 2
alias subl='sublime_text'
#CORS active Chromium
alias cors='/usr/lib/chromium/chromium %U --disable-web-security'

#Return Temperature CPU
alias tropique='watch sensors'

# Tree
alias tree='tree -L 1'

alias ..='cd ..'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
#alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

#Build a local server on :8000 to serve static file or custom port
function server() {
	python -m SimpleHTTPServer $@
}

#Build in PHP server
alias phpserver='php -S localhost:8000'

#Front-server livereload cross plateform via ws://
alias front-serve='http-server & browser-sync start  --files "**/*.html,**/*.css,**/*.js" --proxy="localhost:8080"'

#get my public IP
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"

# Get Local ip
alias ipHome="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*.xz) unxz -k $1;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}


alias hadopi='sudo ngrep -d eth0 -q -W byline "^(GET|POST) .*"'
alias johnny='echo "ha que coucou"'

alias editsource='nano -c ~/.bashrc.d/bashrc_aliases'
alias bashsource='source ~/.bashrc'

# Convert to base 64 a file - call alias with filename
alias to64='openssl base64 -in '

# Build PHP project with PSR-X compliance
alias phpPSR='/usr/local/bin/php-cs-fixer';

# Clean Angular file
function ngMin() {
  ng-annotate -ar --single_quotes --stats $1 -o $1
}


# Build with PSR-2 compliance 
alias cleanManagerPSR='phpPSR fix src/manager/ --level=psr2 --fixers=-psr0 --verbose'

# flush cache
alias cacheDrop='su -c "sync && echo 3 > /proc/sys/vm/drop_caches"'

# flush swap
alias flush-swap="echo 'sync && swapoff -a && sync && swapon -a' | sudo /bin/bash"

# Copy output
alias copy='xclip -sel clip && echo "Copy to the clipboard"'

# Install NPM and add the flag --save-dev
function npmdev() {
  npm install --save-dev $1
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Mount my external HD
alias icybox='su -c "mount -t ntfs-3g /dev/sdb1 /media/icybox"'
alias icyboxout='su -c "umount -t ntfs-3g /dev/sdb1 /media/icybox"'

alias nano='nano -c'

# copy ssh key
alias copyssh='xclip -sel clip < ~/.ssh/id_rsa.pub'

# Display colors
alias termcolor='printf "\e[%dm%d dark\e[0m  \e[%d;1m%d bold\e[0m\n" {30..47}{,,,} #'

# Set US international Keyboard
alias clavier='su -c "setxkbmap us -variant intl"'

# Backup Shaarli
alias backupShaarli='/home/dhoko/dev/scripts/backupShaarli.sh'

# Set bash
function usebash() {
    sudo usermod -s /bin/bash $1
}

# Tunnel (http://sebastien.saunier.me/blog/2013/11/06/stay-safe-on-unencrypted-public-wi-fi-networks.html)
alias tunnel='~/code/python/sshuttle/sshuttle --dns \
              --daemon --pidfile=/tmp/sshuttle.pid --remote=elysion 0/0'
alias tunnelx='[[ -f /tmp/sshuttle.pid ]] && kill $(cat /tmp/sshuttle.pid) && echo "disconnected"'

# Create fake files (1Mo) from an array
function fakefiles() {
        a=("$@")
        ((last_idx=${#a[@]} - 1))
        b=${a[last_idx]}
        unset a[last_idx]

        for i in "${a[@]}" ; do

                 echo "Create a fake file for : " $i;
                 dd if=/dev/zero of=$name.tar.gz bs=1k count=1024;
        done
}


# Display OS version
alias myOS='lsb_release -a'

# Rename files in a directory
function mvFile() {
  for file in $(ls);
  do
    mv ${file%%.*}.${file#*.} $@.${file#*.};
  done;
}

# Start Symfony server
function sfServer() {
  php app/console server:run $@ && php app/console assetic:dump --watch
}

## Check if npm dependencies are up to date
alias checkVersionNpm='~/pkg/node_modules/npm-check-updates/bin/npm-check-updates'

# count the occurrences of a string within a file 
function countWordInFile() {
  grep -o "$1" $2 | wc -l
}

# Count lines of code for an extension in a directory
# Thanks to @HugoGiraudel
function countLinesCode() {
  ( find ./ -name '*.$1' -print0 | xargs -0 cat ) | wc -l
}

# KDE 5 reload plasma without logging out
# from http://askubuntu.com/questions/481329/can-i-restart-the-kde-plasma-desktop-without-logging-out
alias reloadPlasma='killall plasmashell && kstart plasmashell &'
